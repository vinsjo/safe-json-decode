{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["export type reviver = (this: any, key: string, value: any) => any;\nexport type replacer = (this: any, key: string, value: any) => any;\nexport type errorCallback = (err: Error) => void;\n\n/**\n * Decode JSON string\n *\n * @param  json  JSON string to parse\n * @param  reviver  Optional function that transforms the results. This function is called for each member of the object. If a member contains nested objects, the nested objects are transformed before the parent object is.\n * @param errorCallback  Optional callback function excecuted on failure\n * returns parsed JSON on success, null on failure\n */\nexport function decode(\n\tjson: string,\n\treviver?: reviver,\n\terrorCallback?: errorCallback\n): any | null {\n\ttry {\n\t\treturn JSON.parse(\n\t\t\tjson,\n\t\t\ttypeof reviver === 'function' ? reviver : undefined\n\t\t);\n\t} catch (err) {\n\t\tif (typeof errorCallback === 'function') errorCallback(err);\n\t\treturn null;\n\t}\n}\n\n/**\n * Encode data into JSON string\n *\n * @param data  The json-data to convert to string\n * @param replacer  Optional function that transforms the results.\n * @param errorCallback  Optional callback function excecuted on failure\n * returns JSON string on success, null on failure\n */\nexport function encode(\n\tdata: any,\n\treplacer?: replacer,\n\terrorCallback?: errorCallback\n): string | null {\n\ttry {\n\t\treturn JSON.stringify(\n\t\t\tdata,\n\t\t\ttypeof replacer === 'function' ? replacer : undefined\n\t\t);\n\t} catch (err) {\n\t\tif (typeof errorCallback === 'function') errorCallback(err);\n\t\treturn null;\n\t}\n}\n"],"names":["json","reviver","errorCallback","parse","undefined","err","data","replacer","stringify"],"mappings":"WAaCA,EACAC,EACAC,GAEA,IACC,YAAYC,MACXH,EACmB,mBAAnBC,EAAgCA,OAAUG,EAK3C,CAHC,MAAOC,GAER,MAD6B,mBAAzBH,GAAqCA,EAAcG,GAEvD,IAAA,CACD,YAWAC,EACAC,EACAL,GAEA,IACC,YAAYM,UACXF,EACoB,mBAAbC,EAA0BA,OAAWH,EAK7C,CAHC,MAAOC,GAER,MAD6B,sBAAYH,EAAcG,GAChD,IACP,CACD"}